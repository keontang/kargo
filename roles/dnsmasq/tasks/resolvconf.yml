---
- name: check resolvconf
  shell: which resolvconf
  register: resolvconf
  ignore_errors: yes
  changed_when: false

- name: target resolv.conf file
  set_fact:
    resolvconffile: >-
      {%- if resolvconf.rc == 0 -%}/etc/resolvconf/resolv.conf.d/head{%- else -%}/etc/resolv.conf{%- endif -%}
    base: >-
      {%- if resolvconf.rc == 0 -%}['/etc/resolvconf/resolv.conf.d/base']{%- else -%}[]{%- endif -%}
  when: ansible_os_family != "CoreOS"

- name: target dhclient conf/hook files for Red Hat family
  set_fact:
    dhclientconffile: /etc/dhclient.conf
    dhclienthookfile: /etc/dhcp/dhclient.d/zdnsupdate.sh
  when: ansible_os_family == "RedHat"

- name: target dhclient conf/hook files for Debian family
  set_fact:
    dhclientconffile: /etc/dhcp/dhclient.conf
    dhclienthookfile: /etc/dhcp/dhclient-enter-hooks.d/zdnsupdate.sh
  when: ansible_os_family == "Debian"

- name: target temporary resolvconf cloud init file
  set_fact:
    resolvconffile: /tmp/resolveconf_cloud_init_conf
  when: ansible_os_family == "CoreOS"

- name: create temporary resolveconf cloud init file
  command: cp -f /etc/resolv.conf "{{ resolvconffile }}"
  when: ansible_os_family == "CoreOS"

- name: generate search domains to resolvconf
  set_fact:
    searchentries:
      search {{ ([ 'default.svc.' + dns_domain, 'svc.' + dns_domain ] + searchdomains|default([])) | join(' ') }}
    prepend_search:
      prepend domain-search "{{ ([ 'default.svc.' + dns_domain, 'svc.' + dns_domain ] + searchdomains|default([])) | join('", "') }}";

- name: pick dnsmasq cluster IP
  set_fact:
    dnsmasq_server: >-
      {%- if skip_dnsmasq|bool -%}{{ [ skydns_server ] + upstream_dns_servers|default([]) }}{%- else -%}{{ [ dns_server ] }}{%- endif -%}

- name: generate nameservers to resolvconf
  set_fact:
    nameserverentries:
      nameserver {{( dnsmasq_server|default([]) + nameservers|default([])) | join(',nameserver ')}}
    prepend_nameserver:
      prepend domain-name-servers {{( dnsmasq_server|default([]) + nameservers|default([])) | join(', ') }};

- name: Remove search/domain/nameserver options
  lineinfile:
    dest: "{{item[0]}}"
    state: absent
    regexp: "^{{ item[1] }}.*$"
    backup: yes
    follow: yes
  with_nested:
    - "{{ [resolvconffile] + base|default([]) }}"
    - [ 'search', 'nameserver', 'domain' ]
  notify: Dnsmasq | update resolvconf

- name: Add search/nameservers to resolv.conf
  blockinfile:
    dest: "{{resolvconffile}}"
    block: |-
      {% for item in [searchentries] + nameserverentries.split(',') -%}
      {{ item }}
      {% endfor %}
    state: present
    insertbefore: BOF
    create: yes
    backup: yes
    follow: yes
    marker: "# Ansible entries {mark}"
  notify: Dnsmasq | update resolvconf

- name: Add options to resolv.conf
  lineinfile:
    line: options {{ item }}
    dest: "{{resolvconffile}}"
    state: present
    regexp: "^options.*{{ item }}$"
    insertafter: EOF
    backup: yes
    follow: yes
  with_items:
    - ndots:{{ ndots }}
    - timeout:2
    - attempts:2
  notify: Dnsmasq | update resolvconf

- name: Configure dhclient to prepend search/nameservers
  blockinfile:
    block: |-
      {% for item in [ prepend_search, prepend_nameserver ] -%}
      {{ item }}
      {% endfor %}
    dest: "{{dhclientconffile}}"
    create: yes
    state: present
    insertbefore: BOF
    backup: yes
    follow: yes
    marker: "# Ansible entries {mark}"
  notify: Dnsmasq | restart network
  when: ansible_os_family != "CoreOS"

- name: Configue dhclient hooks for resolv.conf
  template:
    src: dhclient_dnsupdate.sh.j2
    dest: "{{ dhclienthookfile }}"
    owner: root
    mode: 0755
  notify: Dnsmasq | restart network
  when: ansible_os_family != "CoreOS"

- name: get temporary resolveconf cloud init file content
  command: cat {{ resolvconffile }}
  register: cloud_config
  when: ansible_os_family == "CoreOS"

- name: persist resolvconf cloud init file
  template:
    dest: "{{resolveconf_cloud_init_conf}}"
    src: resolvconf.j2
    owner: root
    mode: 0644
  notify: Dnsmasq | update resolvconf for CoreOS
  when: ansible_os_family == "CoreOS"
